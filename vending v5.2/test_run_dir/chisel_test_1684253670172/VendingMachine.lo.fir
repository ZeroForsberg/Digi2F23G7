FIRRTL version 1.1.0
circuit VendingMachine :
  module SevenSegDecv2 :
    input clock : Clock
    input reset : UInt<1>
    input io_in : UInt<6>
    output io_out : UInt<7>
    output io_out2 : UInt<7>

    node _T = rem(io_in, UInt<4>("ha")) @[SevenSegDecv2.scala 25:16]
    node _T_1 = eq(UInt<1>("h0"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_2 = eq(UInt<1>("h1"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_3 = eq(UInt<2>("h2"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_4 = eq(UInt<2>("h3"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_5 = eq(UInt<3>("h4"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_6 = eq(UInt<3>("h5"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_7 = eq(UInt<3>("h6"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_8 = eq(UInt<3>("h7"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_9 = eq(UInt<4>("h8"), _T) @[SevenSegDecv2.scala 25:24]
    node _T_10 = eq(UInt<4>("h9"), _T) @[SevenSegDecv2.scala 25:24]
    node _GEN_0 = mux(_T_10, UInt<7>("h6f"), UInt<1>("h0")) @[SevenSegDecv2.scala 25:24 35:22 10:36]
    node _GEN_1 = mux(_T_9, UInt<7>("h7f"), _GEN_0) @[SevenSegDecv2.scala 25:24 34:22]
    node _GEN_2 = mux(_T_8, UInt<3>("h7"), _GEN_1) @[SevenSegDecv2.scala 25:24 33:22]
    node _GEN_3 = mux(_T_7, UInt<7>("h7d"), _GEN_2) @[SevenSegDecv2.scala 25:24 32:22]
    node _GEN_4 = mux(_T_6, UInt<7>("h6d"), _GEN_3) @[SevenSegDecv2.scala 25:24 31:22]
    node _GEN_5 = mux(_T_5, UInt<7>("h66"), _GEN_4) @[SevenSegDecv2.scala 25:24 30:22]
    node _GEN_6 = mux(_T_4, UInt<7>("h4f"), _GEN_5) @[SevenSegDecv2.scala 25:24 29:22]
    node _GEN_7 = mux(_T_3, UInt<7>("h5b"), _GEN_6) @[SevenSegDecv2.scala 25:24 28:22]
    node _GEN_8 = mux(_T_2, UInt<3>("h6"), _GEN_7) @[SevenSegDecv2.scala 25:24 27:22]
    node _GEN_9 = mux(_T_1, UInt<6>("h3f"), _GEN_8) @[SevenSegDecv2.scala 25:24 26:22]
    node _T_11 = div(io_in, UInt<4>("ha")) @[SevenSegDecv2.scala 38:15]
    node _T_12 = eq(UInt<1>("h0"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_13 = eq(UInt<1>("h1"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_14 = eq(UInt<2>("h2"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_15 = eq(UInt<2>("h3"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_16 = eq(UInt<3>("h4"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_17 = eq(UInt<3>("h5"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_18 = eq(UInt<3>("h6"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_19 = eq(UInt<3>("h7"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_20 = eq(UInt<4>("h8"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _T_21 = eq(UInt<4>("h9"), _T_11) @[SevenSegDecv2.scala 38:22]
    node _GEN_10 = mux(_T_21, UInt<7>("h6f"), UInt<1>("h0")) @[SevenSegDecv2.scala 38:22 48:23 10:36]
    node _GEN_11 = mux(_T_20, UInt<7>("h7f"), _GEN_10) @[SevenSegDecv2.scala 38:22 47:23]
    node _GEN_12 = mux(_T_19, UInt<3>("h7"), _GEN_11) @[SevenSegDecv2.scala 38:22 46:23]
    node _GEN_13 = mux(_T_18, UInt<7>("h7d"), _GEN_12) @[SevenSegDecv2.scala 38:22 45:23]
    node _GEN_14 = mux(_T_17, UInt<7>("h6d"), _GEN_13) @[SevenSegDecv2.scala 38:22 44:23]
    node _GEN_15 = mux(_T_16, UInt<7>("h66"), _GEN_14) @[SevenSegDecv2.scala 38:22 43:23]
    node _GEN_16 = mux(_T_15, UInt<7>("h4f"), _GEN_15) @[SevenSegDecv2.scala 38:22 42:23]
    node _GEN_17 = mux(_T_14, UInt<7>("h5b"), _GEN_16) @[SevenSegDecv2.scala 38:22 41:23]
    node _GEN_18 = mux(_T_13, UInt<3>("h6"), _GEN_17) @[SevenSegDecv2.scala 38:22 40:23]
    node _GEN_19 = mux(_T_12, UInt<6>("h3f"), _GEN_18) @[SevenSegDecv2.scala 38:22 39:23]
    node sevSeg = _GEN_9 @[SevenSegDecv2.scala 10:36]
    node sevSeg2 = _GEN_19 @[SevenSegDecv2.scala 10:36]
    io_out <= sevSeg @[SevenSegDecv2.scala 52:10]
    io_out2 <= sevSeg2 @[SevenSegDecv2.scala 53:11]

  module DisplayMultiplexer :
    input clock : Clock
    input reset : UInt<1>
    input io_sum : UInt<6>
    input io_price : UInt<6>
    output io_seg : UInt<7>
    output io_an : UInt<4>
    input io_sumAlarm : UInt<1>
    input io_priceAlarm : UInt<1>
    input io_EPty : UInt<1>

    inst sevenSegdec of SevenSegDecv2 @[DisplayMultiplexer.scala 14:27]
    reg tickCounterReg : UInt<17>, clock with :
      reset => (UInt<1>("h0"), tickCounterReg) @[DisplayMultiplexer.scala 27:31]
    reg next : UInt<2>, clock with :
      reset => (UInt<1>("h0"), next) @[DisplayMultiplexer.scala 31:21]
    node _tickCounterReg_T = add(tickCounterReg, UInt<1>("h1")) @[DisplayMultiplexer.scala 34:36]
    node _tickCounterReg_T_1 = tail(_tickCounterReg_T, 1) @[DisplayMultiplexer.scala 34:36]
    node _T = eq(tickCounterReg, UInt<3>("h4")) @[DisplayMultiplexer.scala 35:24]
    node _next_T = add(next, UInt<1>("h1")) @[DisplayMultiplexer.scala 36:18]
    node _next_T_1 = tail(_next_T, 1) @[DisplayMultiplexer.scala 36:18]
    node _GEN_0 = mux(_T, _next_T_1, next) @[DisplayMultiplexer.scala 35:34 36:10 31:21]
    node _GEN_1 = mux(_T, UInt<1>("h0"), _tickCounterReg_T_1) @[DisplayMultiplexer.scala 34:18 35:34 37:20]
    node _T_1 = eq(next, UInt<1>("h0")) @[DisplayMultiplexer.scala 41:29]
    node _T_2 = eq(next, UInt<1>("h1")) @[DisplayMultiplexer.scala 41:44]
    node _T_3 = or(_T_1, _T_2) @[DisplayMultiplexer.scala 41:37]
    node _T_4 = and(io_sumAlarm, _T_3) @[DisplayMultiplexer.scala 41:20]
    node _GEN_2 = mux(_T_4, UInt<1>("h0"), sevenSegdec.io_out2) @[DisplayMultiplexer.scala 24:11 41:53 42:13]
    node _T_12 = eq(next, UInt<2>("h2")) @[DisplayMultiplexer.scala 58:15]
    node _T_13 = eq(next, UInt<2>("h3")) @[DisplayMultiplexer.scala 58:30]
    node _T_14 = or(_T_12, _T_13) @[DisplayMultiplexer.scala 58:23]
    node _T_9 = eq(next, UInt<1>("h0")) @[DisplayMultiplexer.scala 53:15]
    node _T_10 = eq(next, UInt<1>("h1")) @[DisplayMultiplexer.scala 53:30]
    node _T_11 = or(_T_9, _T_10) @[DisplayMultiplexer.scala 53:23]
    node _T_5 = eq(next, UInt<2>("h2")) @[DisplayMultiplexer.scala 47:31]
    node _T_6 = eq(next, UInt<2>("h3")) @[DisplayMultiplexer.scala 47:46]
    node _T_7 = or(_T_5, _T_6) @[DisplayMultiplexer.scala 47:39]
    node _T_8 = and(io_priceAlarm, _T_7) @[DisplayMultiplexer.scala 47:22]
    node _GEN_4 = mux(_T_8, UInt<1>("h0"), _GEN_2) @[DisplayMultiplexer.scala 47:56 48:13]
    node _GEN_6 = mux(_T_11, UInt<7>("h79"), _GEN_4) @[DisplayMultiplexer.scala 53:38 55:15]
    node _GEN_8 = mux(_T_14, UInt<7>("h78"), _GEN_6) @[DisplayMultiplexer.scala 58:39 59:15]
    node _GEN_10 = mux(io_EPty, _GEN_8, _GEN_4) @[DisplayMultiplexer.scala 52:16]
    node sevSeg2 = _GEN_10 @[DisplayMultiplexer.scala 18:28]
    node _GEN_3 = mux(_T_4, sevSeg2, sevenSegdec.io_out) @[DisplayMultiplexer.scala 23:11 41:53 43:13]
    node _GEN_5 = mux(_T_8, sevSeg2, _GEN_3) @[DisplayMultiplexer.scala 47:56 49:13]
    node _GEN_7 = mux(_T_11, UInt<7>("h73"), _GEN_5) @[DisplayMultiplexer.scala 53:38 56:15]
    node _GEN_9 = mux(_T_14, UInt<7>("h6e"), _GEN_7) @[DisplayMultiplexer.scala 58:39 60:15]
    node _GEN_11 = mux(io_EPty, _GEN_9, _GEN_5) @[DisplayMultiplexer.scala 52:16]
    node _T_15 = eq(UInt<1>("h0"), next) @[DisplayMultiplexer.scala 64:16]
    node _T_16 = eq(UInt<1>("h1"), next) @[DisplayMultiplexer.scala 64:16]
    node _T_17 = eq(UInt<2>("h2"), next) @[DisplayMultiplexer.scala 64:16]
    node _T_18 = eq(UInt<2>("h3"), next) @[DisplayMultiplexer.scala 64:16]
    node _GEN_12 = mux(_T_18, UInt<4>("he"), UInt<4>("h1")) @[DisplayMultiplexer.scala 64:16 81:14 19:27]
    node _GEN_13 = mux(_T_18, io_price, UInt<1>("h0")) @[DisplayMultiplexer.scala 64:16 22:21 82:25]
    node sevSeg1 = _GEN_11 @[DisplayMultiplexer.scala 17:28]
    node _GEN_14 = mux(_T_18, sevSeg1, UInt<7>("h7f")) @[DisplayMultiplexer.scala 64:16 83:14 16:27]
    node _GEN_15 = mux(_T_17, UInt<4>("hd"), _GEN_12) @[DisplayMultiplexer.scala 64:16 76:14]
    node _GEN_16 = mux(_T_17, io_price, _GEN_13) @[DisplayMultiplexer.scala 64:16 77:25]
    node _GEN_17 = mux(_T_17, sevSeg2, _GEN_14) @[DisplayMultiplexer.scala 64:16 78:14]
    node _GEN_18 = mux(_T_16, UInt<4>("hb"), _GEN_15) @[DisplayMultiplexer.scala 64:16 71:14]
    node _GEN_19 = mux(_T_16, io_sum, _GEN_16) @[DisplayMultiplexer.scala 64:16 72:25]
    node _GEN_20 = mux(_T_16, sevSeg1, _GEN_17) @[DisplayMultiplexer.scala 64:16 73:14]
    node _GEN_21 = mux(_T_15, UInt<3>("h7"), _GEN_18) @[DisplayMultiplexer.scala 64:16 66:14]
    node _GEN_22 = mux(_T_15, io_sum, _GEN_19) @[DisplayMultiplexer.scala 64:16 67:25]
    node _GEN_23 = mux(_T_15, sevSeg2, _GEN_20) @[DisplayMultiplexer.scala 64:16 68:14]
    node sevSeg = _GEN_23 @[DisplayMultiplexer.scala 16:27]
    node _io_seg_T = not(sevSeg) @[DisplayMultiplexer.scala 89:13]
    node select = _GEN_21 @[DisplayMultiplexer.scala 19:27]
    io_seg <= _io_seg_T @[DisplayMultiplexer.scala 89:10]
    io_an <= select @[DisplayMultiplexer.scala 90:9]
    sevenSegdec.clock <= clock
    sevenSegdec.reset <= reset
    sevenSegdec.io_in <= _GEN_22
    tickCounterReg <= mux(reset, UInt<17>("h0"), _GEN_1) @[DisplayMultiplexer.scala 27:{31,31}]
    next <= mux(reset, UInt<2>("h0"), _GEN_0) @[DisplayMultiplexer.scala 31:{21,21}]

  module VendingMachine :
    input clock : Clock
    input reset : UInt<1>
    input io_price : UInt<6>
    input io_coin2 : UInt<1>
    input io_coin5 : UInt<1>
    input io_buy : UInt<1>
    output io_releaseCan : UInt<1>
    output io_alarm : UInt<1>
    output io_seg : UInt<7>
    output io_an : UInt<4>
    output io_led1 : UInt<1>
    output io_led2 : UInt<1>
    output io_led3 : UInt<1>
    output io_led4 : UInt<1>

    inst dispMux of DisplayMultiplexer @[VendingMachine.scala 15:23]
    reg sumCnt : UInt<6>, clock with :
      reset => (UInt<1>("h0"), sumCnt) @[VendingMachine.scala 18:39]
    reg sumReg : UInt<6>, clock with :
      reset => (UInt<1>("h0"), sumReg) @[VendingMachine.scala 18:39]
    reg sumMax : UInt<6>, clock with :
      reset => (UInt<1>("h0"), sumMax) @[VendingMachine.scala 18:39]
    reg countCoin : UInt<3>, clock with :
      reset => (UInt<1>("h0"), countCoin) @[VendingMachine.scala 19:26]
    reg countCan : UInt<3>, clock with :
      reset => (UInt<1>("h0"), countCan) @[VendingMachine.scala 20:25]
    node _sumMax_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[VendingMachine.scala 22:42]
    node _sumMax_T_1 = tail(_sumMax_T, 1) @[VendingMachine.scala 22:42]
    reg blink5 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), blink5) @[VendingMachine.scala 28:23]
    reg state : UInt<2>, clock with :
      reset => (UInt<1>("h0"), state) @[VendingMachine.scala 42:22]
    node _T = eq(UInt<1>("h0"), state) @[VendingMachine.scala 43:16]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[VendingMachine.scala 46:30]
    node _T_1 = eq(REG, UInt<1>("h0")) @[VendingMachine.scala 46:22]
    node _T_2 = and(io_buy, _T_1) @[VendingMachine.scala 46:19]
    node _T_3 = geq(sumReg, io_price) @[VendingMachine.scala 47:21]
    node _sumReg_T = sub(sumReg, io_price) @[VendingMachine.scala 48:28]
    node _sumReg_T_1 = tail(_sumReg_T, 1) @[VendingMachine.scala 48:28]
    node _countCan_T = sub(countCan, UInt<1>("h1")) @[VendingMachine.scala 51:32]
    node _countCan_T_1 = tail(_countCan_T, 1) @[VendingMachine.scala 51:32]
    node _T_4 = lt(sumReg, io_price) @[VendingMachine.scala 52:27]
    node _GEN_0 = mux(_T_4, UInt<2>("h2"), state) @[VendingMachine.scala 52:38 53:17 42:22]
    node _GEN_1 = mux(_T_3, _sumReg_T_1, sumReg) @[VendingMachine.scala 47:33 48:18 18:39]
    node _GEN_2 = mux(_T_3, UInt<1>("h1"), _GEN_0) @[VendingMachine.scala 47:33 49:17]
    node _GEN_3 = mux(_T_3, UInt<1>("h0"), countCoin) @[VendingMachine.scala 47:33 50:21 19:26]
    node _GEN_4 = mux(_T_3, _countCan_T_1, countCan) @[VendingMachine.scala 47:33 51:20 20:25]
    node _GEN_5 = mux(_T_2, _GEN_1, sumReg) @[VendingMachine.scala 18:39 46:39]
    node _GEN_6 = mux(_T_2, _GEN_2, state) @[VendingMachine.scala 42:22 46:39]
    node _GEN_7 = mux(_T_2, _GEN_3, countCoin) @[VendingMachine.scala 19:26 46:39]
    node _GEN_8 = mux(_T_2, _GEN_4, countCan) @[VendingMachine.scala 20:25 46:39]
    node _T_5 = eq(countCan, UInt<1>("h0")) @[VendingMachine.scala 57:21]
    node _GEN_9 = mux(_T_5, UInt<2>("h3"), _GEN_6) @[VendingMachine.scala 57:30 58:15]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[VendingMachine.scala 61:32]
    node _T_6 = eq(REG_1, UInt<1>("h0")) @[VendingMachine.scala 61:24]
    node _T_7 = and(io_coin2, _T_6) @[VendingMachine.scala 61:21]
    node _T_34 = eq(UInt<1>("h0"), countCoin) @[VendingMachine.scala 110:21]
    node _T_35 = eq(UInt<1>("h1"), countCoin) @[VendingMachine.scala 110:21]
    node _T_36 = eq(UInt<2>("h2"), countCoin) @[VendingMachine.scala 110:21]
    node _T_37 = eq(UInt<2>("h3"), countCoin) @[VendingMachine.scala 110:21]
    node _T_38 = eq(UInt<3>("h4"), countCoin) @[VendingMachine.scala 110:21]
    node _GEN_50 = mux(_T_38, UInt<1>("h1"), UInt<1>("h0")) @[VendingMachine.scala 110:21 139:15 25:46]
    node _GEN_52 = mux(_T_37, UInt<1>("h0"), _GEN_50) @[VendingMachine.scala 110:21 133:15]
    node _GEN_55 = mux(_T_36, UInt<1>("h0"), _GEN_52) @[VendingMachine.scala 110:21 127:15]
    node _GEN_58 = mux(_T_35, UInt<1>("h0"), _GEN_55) @[VendingMachine.scala 110:21 121:15]
    node _GEN_61 = mux(_T_34, UInt<1>("h0"), _GEN_58) @[VendingMachine.scala 110:21 115:15]
    node cntflg3 = _GEN_61 @[VendingMachine.scala 25:46]
    node _T_8 = eq(cntflg3, UInt<1>("h0")) @[VendingMachine.scala 61:46]
    node _T_9 = and(_T_7, _T_8) @[VendingMachine.scala 61:43]
    node _T_10 = sub(sumMax, UInt<2>("h2")) @[VendingMachine.scala 61:73]
    node _T_11 = tail(_T_10, 1) @[VendingMachine.scala 61:73]
    node _T_12 = leq(sumReg, _T_11) @[VendingMachine.scala 61:64]
    node _T_13 = and(_T_9, _T_12) @[VendingMachine.scala 61:55]
    node _sumReg_T_2 = add(sumReg, UInt<2>("h2")) @[VendingMachine.scala 62:26]
    node _sumReg_T_3 = tail(_sumReg_T_2, 1) @[VendingMachine.scala 62:26]
    node _countCoin_T = add(countCoin, UInt<1>("h1")) @[VendingMachine.scala 63:32]
    node _countCoin_T_1 = tail(_countCoin_T, 1) @[VendingMachine.scala 63:32]
    node _GEN_10 = mux(_T_13, _sumReg_T_3, _GEN_5) @[VendingMachine.scala 61:80 62:16]
    node _GEN_11 = mux(_T_13, _countCoin_T_1, _GEN_7) @[VendingMachine.scala 61:80 63:19]
    reg REG_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_2) @[VendingMachine.scala 65:32]
    node _T_14 = eq(REG_2, UInt<1>("h0")) @[VendingMachine.scala 65:24]
    node _T_15 = and(io_coin5, _T_14) @[VendingMachine.scala 65:21]
    node _T_16 = eq(cntflg3, UInt<1>("h0")) @[VendingMachine.scala 65:46]
    node _T_17 = and(_T_15, _T_16) @[VendingMachine.scala 65:43]
    node _T_18 = sub(sumMax, UInt<3>("h5")) @[VendingMachine.scala 65:73]
    node _T_19 = tail(_T_18, 1) @[VendingMachine.scala 65:73]
    node _T_20 = leq(sumReg, _T_19) @[VendingMachine.scala 65:64]
    node _T_21 = and(_T_17, _T_20) @[VendingMachine.scala 65:55]
    node _sumReg_T_4 = add(sumReg, UInt<3>("h5")) @[VendingMachine.scala 66:26]
    node _sumReg_T_5 = tail(_sumReg_T_4, 1) @[VendingMachine.scala 66:26]
    node _countCoin_T_2 = add(countCoin, UInt<1>("h1")) @[VendingMachine.scala 67:32]
    node _countCoin_T_3 = tail(_countCoin_T_2, 1) @[VendingMachine.scala 67:32]
    node _GEN_12 = mux(_T_21, _sumReg_T_5, _GEN_10) @[VendingMachine.scala 65:80 66:16]
    node _GEN_13 = mux(_T_21, _countCoin_T_3, _GEN_11) @[VendingMachine.scala 65:80 67:19]
    node _T_22 = eq(UInt<1>("h1"), state) @[VendingMachine.scala 43:16]
    reg REG_3 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_3) @[VendingMachine.scala 73:27]
    node _T_23 = eq(REG_3, UInt<1>("h0")) @[VendingMachine.scala 73:19]
    reg next : UInt<2>, clock with :
      reset => (UInt<1>("h0"), next) @[VendingMachine.scala 154:21]
    node _T_40 = eq(UInt<1>("h0"), next) @[VendingMachine.scala 162:16]
    node _T_41 = eq(UInt<1>("h1"), next) @[VendingMachine.scala 162:16]
    node _T_42 = eq(UInt<2>("h2"), next) @[VendingMachine.scala 162:16]
    node _T_43 = eq(UInt<2>("h3"), next) @[VendingMachine.scala 162:16]
    node _GEN_64 = mux(_T_43, UInt<1>("h0"), UInt<1>("h0")) @[VendingMachine.scala 162:16 176:11 26:49]
    node _GEN_65 = mux(_T_42, UInt<1>("h0"), _GEN_64) @[VendingMachine.scala 162:16 172:11]
    node _GEN_67 = mux(_T_41, UInt<1>("h1"), _GEN_65) @[VendingMachine.scala 162:16 168:11]
    node _GEN_69 = mux(_T_40, UInt<1>("h1"), _GEN_67) @[VendingMachine.scala 162:16 164:11]
    node LED = _GEN_69 @[VendingMachine.scala 26:49]
    node _T_24 = and(LED, _T_23) @[VendingMachine.scala 73:16]
    node _T_25 = eq(blink5, UInt<1>("h0")) @[VendingMachine.scala 74:21]
    node _blink5_T = sub(blink5, UInt<1>("h1")) @[VendingMachine.scala 77:28]
    node _blink5_T_1 = tail(_blink5_T, 1) @[VendingMachine.scala 77:28]
    node _GEN_14 = mux(_T_25, UInt<1>("h0"), state) @[VendingMachine.scala 74:29 75:17 42:22]
    node _GEN_15 = mux(_T_25, blink5, _blink5_T_1) @[VendingMachine.scala 28:23 74:29 77:18]
    node _GEN_16 = mux(_T_24, _GEN_14, state) @[VendingMachine.scala 42:22 73:33]
    node _GEN_17 = mux(_T_24, _GEN_15, blink5) @[VendingMachine.scala 28:23 73:33]
    node _T_26 = eq(UInt<2>("h2"), state) @[VendingMachine.scala 43:16]
    reg REG_4 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_4) @[VendingMachine.scala 86:27]
    node _T_27 = eq(REG_4, UInt<1>("h0")) @[VendingMachine.scala 86:19]
    node _T_28 = and(LED, _T_27) @[VendingMachine.scala 86:16]
    node _T_29 = eq(blink5, UInt<1>("h0")) @[VendingMachine.scala 87:21]
    node _blink5_T_2 = sub(blink5, UInt<1>("h1")) @[VendingMachine.scala 90:28]
    node _blink5_T_3 = tail(_blink5_T_2, 1) @[VendingMachine.scala 90:28]
    node _GEN_18 = mux(_T_29, UInt<1>("h0"), state) @[VendingMachine.scala 87:30 88:17 42:22]
    node _GEN_19 = mux(_T_29, blink5, _blink5_T_3) @[VendingMachine.scala 28:23 87:30 90:18]
    node _GEN_20 = mux(_T_28, _GEN_18, state) @[VendingMachine.scala 42:22 86:34]
    node _GEN_21 = mux(_T_28, _GEN_19, blink5) @[VendingMachine.scala 28:23 86:34]
    node _T_30 = eq(UInt<2>("h3"), state) @[VendingMachine.scala 43:16]
    reg REG_5 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_5) @[VendingMachine.scala 98:27]
    node _T_31 = eq(REG_5, UInt<1>("h0")) @[VendingMachine.scala 98:19]
    node _T_32 = and(LED, _T_31) @[VendingMachine.scala 98:16]
    node _T_33 = eq(blink5, UInt<1>("h0")) @[VendingMachine.scala 99:21]
    node _blink5_T_4 = sub(blink5, UInt<1>("h1")) @[VendingMachine.scala 102:28]
    node _blink5_T_5 = tail(_blink5_T_4, 1) @[VendingMachine.scala 102:28]
    node _GEN_22 = mux(_T_33, UInt<1>("h0"), state) @[VendingMachine.scala 100:17 42:22 99:30]
    node _GEN_23 = mux(_T_33, blink5, _blink5_T_5) @[VendingMachine.scala 102:18 28:23 99:30]
    node _GEN_24 = mux(_T_32, _GEN_22, state) @[VendingMachine.scala 42:22 98:34]
    node _GEN_25 = mux(_T_32, _GEN_23, blink5) @[VendingMachine.scala 28:23 98:34]
    node _GEN_26 = mux(_T_30, UInt<1>("h1"), UInt<1>("h0")) @[VendingMachine.scala 43:16 38:19 97:23]
    node _GEN_27 = mux(_T_30, _GEN_24, state) @[VendingMachine.scala 43:16 42:22]
    node _GEN_28 = mux(_T_30, _GEN_25, blink5) @[VendingMachine.scala 43:16 28:23]
    node _GEN_29 = mux(_T_26, LED, UInt<1>("h0")) @[VendingMachine.scala 43:16 37:25 84:29]
    node _GEN_30 = mux(_T_26, UInt<1>("h1"), UInt<1>("h0")) @[VendingMachine.scala 43:16 85:14 26:49]
    node _GEN_31 = mux(_T_26, _GEN_20, _GEN_27) @[VendingMachine.scala 43:16]
    node _GEN_32 = mux(_T_26, _GEN_21, _GEN_28) @[VendingMachine.scala 43:16]
    node _GEN_33 = mux(_T_26, UInt<1>("h0"), _GEN_26) @[VendingMachine.scala 43:16 38:19]
    node _GEN_34 = mux(_T_22, LED, UInt<1>("h0")) @[VendingMachine.scala 43:16 30:17 72:21]
    node _GEN_35 = mux(_T_22, _GEN_16, _GEN_31) @[VendingMachine.scala 43:16]
    node _GEN_36 = mux(_T_22, _GEN_17, _GEN_32) @[VendingMachine.scala 43:16]
    node _GEN_37 = mux(_T_22, UInt<1>("h0"), _GEN_29) @[VendingMachine.scala 43:16 37:25]
    node _GEN_38 = mux(_T_22, UInt<1>("h0"), _GEN_30) @[VendingMachine.scala 43:16 26:49]
    node _GEN_39 = mux(_T_22, UInt<1>("h0"), _GEN_33) @[VendingMachine.scala 43:16 38:19]
    node _GEN_40 = mux(_T, UInt<3>("h4"), _GEN_36) @[VendingMachine.scala 43:16 45:14]
    node _GEN_41 = mux(_T, _GEN_12, sumReg) @[VendingMachine.scala 43:16 18:39]
    node _GEN_42 = mux(_T, _GEN_9, _GEN_35) @[VendingMachine.scala 43:16]
    node _GEN_43 = mux(_T, _GEN_13, countCoin) @[VendingMachine.scala 43:16 19:26]
    node _GEN_44 = mux(_T, _GEN_8, countCan) @[VendingMachine.scala 43:16 20:25]
    node _GEN_45 = mux(_T, UInt<1>("h0"), _GEN_34) @[VendingMachine.scala 43:16 30:17]
    node _GEN_46 = mux(_T, UInt<1>("h0"), _GEN_37) @[VendingMachine.scala 43:16 37:25]
    node _GEN_47 = mux(_T, UInt<1>("h0"), _GEN_38) @[VendingMachine.scala 43:16 26:49]
    node _GEN_48 = mux(_T, UInt<1>("h0"), _GEN_39) @[VendingMachine.scala 43:16 38:19]
    node _GEN_49 = mux(_T_38, UInt<1>("h0"), UInt<1>("h0")) @[VendingMachine.scala 110:21 137:15 25:46]
    node _GEN_51 = mux(_T_37, UInt<1>("h1"), _GEN_49) @[VendingMachine.scala 110:21 131:15]
    node _GEN_53 = mux(_T_36, UInt<1>("h0"), _GEN_51) @[VendingMachine.scala 110:21 125:15]
    node _GEN_54 = mux(_T_36, UInt<1>("h1"), _GEN_51) @[VendingMachine.scala 110:21 126:15]
    node _GEN_56 = mux(_T_35, UInt<1>("h1"), _GEN_53) @[VendingMachine.scala 110:21 119:15]
    node _GEN_57 = mux(_T_35, UInt<1>("h0"), _GEN_54) @[VendingMachine.scala 110:21 120:15]
    node _GEN_59 = mux(_T_34, UInt<1>("h0"), _GEN_56) @[VendingMachine.scala 110:21 113:15]
    node _GEN_60 = mux(_T_34, UInt<1>("h0"), _GEN_57) @[VendingMachine.scala 110:21 114:15]
    node cntflg1 = _GEN_59 @[VendingMachine.scala 25:46]
    node cntflg2 = _GEN_60 @[VendingMachine.scala 25:46]
    node _io_led1_T = or(cntflg1, cntflg2) @[VendingMachine.scala 143:23]
    node _io_led1_T_1 = or(_io_led1_T, cntflg3) @[VendingMachine.scala 143:33]
    node _io_led2_T = or(cntflg2, cntflg3) @[VendingMachine.scala 144:23]
    node _io_led3_T = and(cntflg1, cntflg2) @[VendingMachine.scala 145:23]
    node _io_led3_T_1 = or(_io_led3_T, cntflg3) @[VendingMachine.scala 145:34]
    node _io_led4_T = eq(cntflg1, UInt<1>("h0")) @[VendingMachine.scala 146:26]
    node _io_led4_T_1 = and(cntflg3, _io_led4_T) @[VendingMachine.scala 146:23]
    node _io_led4_T_2 = eq(cntflg2, UInt<1>("h0")) @[VendingMachine.scala 146:38]
    node _io_led4_T_3 = and(_io_led4_T_1, _io_led4_T_2) @[VendingMachine.scala 146:35]
    reg tickCounterReg : UInt<27>, clock with :
      reset => (UInt<1>("h0"), tickCounterReg) @[VendingMachine.scala 150:31]
    node _tickCounterReg_T = add(tickCounterReg, UInt<1>("h1")) @[VendingMachine.scala 156:36]
    node _tickCounterReg_T_1 = tail(_tickCounterReg_T, 1) @[VendingMachine.scala 156:36]
    node _T_39 = eq(tickCounterReg, UInt<6>("h31")) @[VendingMachine.scala 157:23]
    node _next_T = add(next, UInt<1>("h1")) @[VendingMachine.scala 158:18]
    node _next_T_1 = tail(_next_T, 1) @[VendingMachine.scala 158:18]
    node _GEN_62 = mux(_T_39, _next_T_1, next) @[VendingMachine.scala 157:33 158:10 154:21]
    node _GEN_63 = mux(_T_39, UInt<1>("h0"), _tickCounterReg_T_1) @[VendingMachine.scala 156:18 157:33 159:20]
    node _GEN_66 = mux(_T_42, UInt<1>("h1"), _GEN_64) @[VendingMachine.scala 162:16 173:13]
    node _GEN_68 = mux(_T_41, UInt<1>("h0"), _GEN_66) @[VendingMachine.scala 162:16 169:13]
    node _GEN_70 = mux(_T_40, UInt<1>("h1"), _GEN_68) @[VendingMachine.scala 162:16 165:13]
    reg REG_6 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_6) @[VendingMachine.scala 181:25]
    node _T_44 = eq(REG_6, UInt<1>("h0")) @[VendingMachine.scala 181:17]
    node count = _GEN_70 @[VendingMachine.scala 26:49]
    node _T_45 = and(count, _T_44) @[VendingMachine.scala 181:14]
    node _T_46 = eq(count, UInt<1>("h0")) @[VendingMachine.scala 181:35]
    reg REG_7 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_7) @[VendingMachine.scala 181:52]
    node _T_47 = and(_T_46, REG_7) @[VendingMachine.scala 181:42]
    node _T_48 = or(_T_45, _T_47) @[VendingMachine.scala 181:33]
    node _T_49 = lt(sumCnt, sumReg) @[VendingMachine.scala 182:17]
    node _sumCnt_T = add(sumCnt, UInt<1>("h1")) @[VendingMachine.scala 183:24]
    node _sumCnt_T_1 = tail(_sumCnt_T, 1) @[VendingMachine.scala 183:24]
    node _GEN_71 = mux(_T_49, _sumCnt_T_1, sumCnt) @[VendingMachine.scala 182:26 183:14 18:39]
    node _T_50 = gt(sumCnt, sumReg) @[VendingMachine.scala 185:17]
    node _sumCnt_T_2 = sub(sumCnt, UInt<1>("h1")) @[VendingMachine.scala 186:24]
    node _sumCnt_T_3 = tail(_sumCnt_T_2, 1) @[VendingMachine.scala 186:24]
    node _GEN_72 = mux(_T_50, _sumCnt_T_3, _GEN_71) @[VendingMachine.scala 185:27 186:14]
    node _GEN_73 = mux(_T_48, _GEN_72, sumCnt) @[VendingMachine.scala 18:39 181:60]
    node _coinFull_T = or(io_coin5, io_coin2) @[VendingMachine.scala 192:26]
    node _coinFull_T_1 = and(_coinFull_T, cntflg3) @[VendingMachine.scala 192:38]
    node _coinFull_T_2 = eq(state, UInt<2>("h2")) @[VendingMachine.scala 192:58]
    node _coinFull_T_3 = or(_coinFull_T_1, _coinFull_T_2) @[VendingMachine.scala 192:50]
    node coinFull = _coinFull_T_3 @[VendingMachine.scala 192:12 26:49]
    node _io_alarm_T = and(LED, coinFull) @[VendingMachine.scala 199:19]
    node _dispMux_io_sumAlarm_T = and(LED, coinFull) @[VendingMachine.scala 201:30]
    node _dispMux_io_price_T = bits(io_price, 4, 0) @[VendingMachine.scala 204:31]
    node sevSeg = UInt<7>("h7f") @[VendingMachine.scala 16:{27,27}]
    node noCash = _GEN_47 @[VendingMachine.scala 26:49]
    io_releaseCan <= _GEN_45
    io_alarm <= _io_alarm_T @[VendingMachine.scala 199:12]
    io_seg <= dispMux.io_seg @[VendingMachine.scala 207:10]
    io_an <= dispMux.io_an @[VendingMachine.scala 208:9]
    io_led1 <= _io_led1_T_1 @[VendingMachine.scala 143:11]
    io_led2 <= _io_led2_T @[VendingMachine.scala 144:11]
    io_led3 <= _io_led3_T_1 @[VendingMachine.scala 145:11]
    io_led4 <= _io_led4_T_3 @[VendingMachine.scala 146:11]
    dispMux.clock <= clock
    dispMux.reset <= reset
    dispMux.io_sum <= sumCnt @[VendingMachine.scala 205:18]
    dispMux.io_price <= pad(_dispMux_io_price_T, 6) @[VendingMachine.scala 204:20]
    dispMux.io_sumAlarm <= _dispMux_io_sumAlarm_T @[VendingMachine.scala 201:23]
    dispMux.io_priceAlarm <= _GEN_46
    dispMux.io_EPty <= _GEN_48
    sumCnt <= mux(reset, UInt<6>("h0"), _GEN_73) @[VendingMachine.scala 18:{39,39}]
    sumReg <= mux(reset, UInt<6>("h0"), _GEN_41) @[VendingMachine.scala 18:{39,39}]
    sumMax <= bits(mux(reset, UInt<6>("h0"), _sumMax_T_1), 5, 0) @[VendingMachine.scala 18:{39,39} 22:10]
    countCoin <= mux(reset, UInt<3>("h0"), _GEN_43) @[VendingMachine.scala 19:{26,26}]
    countCan <= mux(reset, UInt<3>("h4"), _GEN_44) @[VendingMachine.scala 20:{25,25}]
    blink5 <= mux(reset, UInt<3>("h0"), _GEN_40) @[VendingMachine.scala 28:{23,23}]
    state <= mux(reset, UInt<2>("h0"), _GEN_42) @[VendingMachine.scala 42:{22,22}]
    REG <= io_buy @[VendingMachine.scala 46:30]
    REG_1 <= io_coin2 @[VendingMachine.scala 61:32]
    REG_2 <= io_coin5 @[VendingMachine.scala 65:32]
    REG_3 <= LED @[VendingMachine.scala 73:27]
    REG_4 <= LED @[VendingMachine.scala 86:27]
    REG_5 <= LED @[VendingMachine.scala 98:27]
    tickCounterReg <= mux(reset, UInt<27>("h0"), _GEN_63) @[VendingMachine.scala 150:{31,31}]
    next <= mux(reset, UInt<2>("h0"), _GEN_62) @[VendingMachine.scala 154:{21,21}]
    REG_6 <= count @[VendingMachine.scala 181:25]
    REG_7 <= count @[VendingMachine.scala 181:52]
