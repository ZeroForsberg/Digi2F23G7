import chisel3._

class SevenSegmentDisplay extends Module {
  val io = IO(new Bundle {
    val input = Input(UInt(5.W))
    val digitSelect = Input(Bool())
    val seg = Output(Vec(7, UInt(1.W)))
    val an = Output(UInt(1.W))
  })

  // Segment decoder
  val secDec = Wire(Vec(10, UInt(7.W)))
  secDec(0) := "b0111111".U // 0
  secDec(1) := "b0000110".U // 1
  secDec(2) := "b1011011".U // 2
  secDec(3) := "b1001111".U // 3
  secDec(4) := "b1100110".U // 4
  secDec(5) := "b1101101".U // 5
  secDec(6) := "b1111101".U // 6
  secDec(7) := "b0000111".U // 7
  secDec(8) := "b1111111".U // 8
  secDec(9) := "b1101111".U // 9

  // Multiplexer
  val digit0Segments = Wire(Vec(7, UInt()))
  val digit1Segments = Wire(Vec(7, UInt()))

  for (i <- 0 until 7) {
    digit0Segments(i) := secDec(io.input(3, 0))(i)
    digit1Segments(i) := secDec(io.input(4, 0))(i)
  }

  io.seg := Mux(io.digitSelect, digit1Segments, digit0Segments)

  val anReg = RegInit(false.B)
  io.an := ~anReg
}
